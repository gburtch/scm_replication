sim_result$b_fe.y[is.na(sim_result$b_fe.y) ] <- sim_result$b_fe.x[ is.na(sim_result$b_fe.y)]
sim_result$b_ipp.y[is.na(sim_result$b_ipp.y) ] <- sim_result$b_ipp.x[ is.na(sim_result$b_ipp.y)]
sim_result$b_bife.y[is.na(sim_result$b_bife.y) ] <- sim_result$b_bife.x[ is.na(sim_result$b_bife.y)]
if("b_control.y" %in% colnames(sim_result)){
sim_result <- sim_result %>% select(-c(b_control.x, b_omit.x, b_fe.x, b_ipp.x,b_bife.x)) %>% rename(b_control=b_control.y, b_omit = b_omit.y, b_fe = b_fe.y, b_ipp = b_ipp.y, b_bife = b_bife.y)
}
}
}
nrow(sim_result %>% subset(!is.na(b_control)))
nrow(sim_result %>% filter(!is.na(b_omit)))
View(sim_result)
nrow(sim_result %>% subset(!is.na(b_fe)))
View(sim_result)
# How many times did clogit fail to converge?
450-nrow(sim_result %>% subset(!is.na(b_fe)))
# Plot distribution of Treatment coefficient.
# Even ignoring estiamtes where models failed to converge, the estimates are sometimes completely wrong!
# In Dummy FE that can be off by 10-20x!
# Even if BIFE, the estimates in 2-period panels are off by crazy amounts.
# But, if clogit converges, we can always trust it to do a reasonable good job.
# Moral of the story? Don't defer to dummy FE or bife if your clogit fails to converge...
# If clogit won't converge, that's telling you something!!!
control <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_control),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + ggtitle("Control (Oracle)")
omit <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_omit),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + ggtitle("Naive (Ignore the Confound)")
clogit <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_fe),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + ggtitle("Conditional Logit)")
dummy <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_ipp),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + ggtitle("Dummy FEs (Incidental Parameter Problem)")
bife <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_bife),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + ggtitle("BIFE (Dummy FEs + Analytical Correction)")
(omit + dummy) / (bife + clogit) + plot_annotation('Performance of Logistic Regression Alternatives Under Confounding', caption = 'Dummy FEs are quite bad in short panels.')
# Plot distribution of Treatment coefficient, zeroing in on "approximately valid" estimates.
control <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_control),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + xlim(-1,7) + ggtitle("Control (Oracle)")
omit <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_omit),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + xlim(-1,7)+ ggtitle("Naive (Ignore the Confound)")
clogit <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_fe),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + xlim(-1,7)+ ggtitle("Conditional Logit)")
dummy <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_ipp),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + xlim(-1,7)+ ggtitle("Dummy FEs (Incidental Parameter Problem)")
bife <- ggplot(data=subset(sim_result,periods %in% c(2,3,4,5,6,7,8,9,10)),aes(x=(b_bife),y=factor(periods))) + geom_density_ridges(size = 0.5,rel_min_height=0.010,fill="lightblue") + ylab("Panel Length") + xlab("Estimated Parameter") + scale_y_discrete(label=c("2","3","4","5","6","7","8","9","10")) + theme(text = element_text(family = "Economica", size = 10)) + ggtitle(paste0("Treatment")) + geom_vline(xintercept=2,color="red") + coord_cartesian(clip = "off") + xlim(-1,7)+ ggtitle("BIFE (Dummy FEs + Analytical Correction)")
(omit + dummy) / (bife + clogit) + plot_annotation('Performance of Logistic Regression Alternatives Under Confounding', caption = 'Dummy FEs are quite bad in short panels.')
# Author: Gord Burtch
# Purpose: Synth with mandatory facemask policy for Covid-19.
library(dplyr)
library(ggplot2)
library(caret)
library(DataCombine)
# Author: Gord Burtch
# Purpose: Synth with mandatory facemask policy for Covid-19.
library(dplyr)
library(ggplot2)
library(caret)
library(DataCombine)
library(synth)
library(Synth)
### Let's do this again with Covid-19 facemask data.
covid <- read.csv(file.choose())
dist_names <- read.csv(file.choose())
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's make into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
# Jena is this district in Germany. They were the first to do mandatory face masks on April 6th, 18 days before federal mandate.
covid$treat <- covid$dist_id==16053
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=cum_cases,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
# Let's pull in some other features of districts.
dist_feats <- read.csv(file.choose())
# Let's pull in some other features of districts.
dist_phys <- read.csv(file.choose())
# Let's pull in some other features of districts.
dist_physicians <- read.csv(file.choose(),sep=";")
# Let's pull in some other features of districts.
dist_physicians <- read.csv(file.choose(),sep=";") %>% rename("Kennziffer" = "dist_id")
dist_physicians <- dist_physicians %>% %>% rename("Kennziffer" = "dist_id")
dist_physicians <- dist_physicians %>% rename("Kennziffer" = "dist_id")
dist_physicians <- dist_physicians %>% rename("dist_id" = "Kennziffer")
View(dist_physicians)
# Let's pull in some other features of districts.
dist_physicians <- read.csv(file.choose(),sep=";") %>% rename("dist_id" = "Kennziffer") %>% [-1,]
help(select)
dist_physicians <- dist_physicians %>% filter(!is.na(dist_id))
View(dist_physicians)
View(dist_physicians)
names(dist_physicians)
dist_physicians <- dist_physicians %>% rename("physicians" = "Ärzte.je..Einwohner")
dist_physicians <- dist_physicians %>% %>% select(c(dist_id,physicians))
dist_physicians <- dist_physicians %>% select(c(dist_id,physicians))
help(gsub)
dist_physicians <- dist_physicians %>% gsub(",",".",)
dist_physicians <- dist_physicians %>% gsub(",",".")
dist_physicians$physicians <- gsub(dist_physicians$physicians,",",".")
# Let's pull in some other features of districts.
dist_physicians <- read.csv(file.choose(),sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- gsub(",",".",dist_physicians$physicians,)
dist_physicians$physicians <- as.numeric(dist_physicians$physicians)
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# Let's pull in pharmacy densities.
dist_pharma <- read.csv(file.choose(),sep=";")
dist_pharma <- dist_pharma %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharamcies <- gsub(",",".",dist_pharma$pharmacies)
dist_pharma$pharmacies <- gsub(",",".",dist_pharma$pharmacies)
dist_pharma <- dist_pharma %>% select(-c(pharamcies))
dist_pharma$pharmacies <- as.numeric(dist_pharma$pharmacies)
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# Let's pull in population info.
dist_pop <- read.csv(file.choose(), sep=";")
# Let's pull in population info.
dist_pop <- read.csv(file.choose(), sep=";")
# Let's pull in population info.
dist_pop <- read.csv(file.choose(), sep=";")
help(mutate)
dist_pop$yr.3.to.under.6.years %<%%>% as.integer()
dist_pop$yr.3.to.under.6.years %<>% as.integer()
dist_pop$yr.3.to.under.6.years <- dist_pop$yr.3.to.under.6.years %>% as.integer()
View(dist_pop)
Covid_DE_cases_by_district <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_cases_by_district.csv")
View(Covid_DE_cases_by_district)
### Let's do this again with Covid-19 facemask data.
covid <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_cases_by_district.csv")
Covid_DE_district_IDs <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_district_IDs.csv")
View(Covid_DE_district_IDs)
dist_names <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_district_IDs.csv")
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Author: Gord Burtch
# Purpose: Synth with mandatory facemask policy for Covid-19.
library(dplyr)
library(ggplot2)
library(caret)
library(Synth)
library(DataCombine)
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's make into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
# Let's pull in physician info.
getwd()
# Let's pull in physician info.
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/district_demographics/")
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# Let's pull in pharmacy info.
dist_pharma <- read.csv("dist_pharmas_2017.csv",sep=";") %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharmacies <- as.numeric(gsub(",",".",dist_pharma$pharmacies))
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
# Background: Jena germany was the first to institute mandatory facemasks, everywhere, in germany.
# They did this on April 6, 2020, about 18 days before federal government imposed it across country.
# We are going to use synthetic control to see what effect this maybe had.
### Let's do this again with Covid-19 facemask data.
covid <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_cases_by_district.csv")
dist_names <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_district_IDs.csv")
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's make into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
# Let's pull in physician info.
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/district_demographics/")
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# Let's pull in pharmacy info.
dist_pharma <- read.csv("dist_pharmas_2017.csv",sep=";") %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharmacies <- as.numeric(gsub(",",".",dist_pharma$pharmacies))
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
dist_pop <- dist_pop$year %>% substr(,1,4) %>% as.integer()
dist_pop$year <- substr(dist_pop$year,1,4) %>% as.integer()
View(dist_pop)
dist_pop <- dist_pop %>% filter(is.numeric(year))
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
dist_pop$year <- substr(dist_pop$year,1,4)
dist_pop$year <- substr(dist_pop$year,1,4)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
dist_pop$year <- substr(dist_pop$year,1,4)
dist_pop <- dist_pop %>% filter(is.numeric(year))
View(dist_pop)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
dist_pop$year <- substr(dist_pop$year,1,4)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";")
dist_pop$year <- substr(dist_pop$year,1,4) %>% as.integer()
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4) %>% as.integer()
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4)
dist_pop <- dist_pop %>% as.integer()
dist_pop <- dist_pop %>% lapply(as.integer())
dist_pop <- dist_pop %>% lapply(as.integer
dist_pop <- dist_pop %>% lapply(as.integer)
dist_pop <- dist_pop %>% lapply(as.integer)
warnings()
# Jena is this district in Germany. They were the first to do mandatory face masks on April 6th, 18 days before federal mandate.
covid$treat <- covid$dist_id==16053
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=cum_cases,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
dist_pop <- dist_pop %>% filter(year==2019)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4)
dist_pop <- dist_pop %>% lapply(as.integer) %>% as.data.frame()
dist_pop <- dist_pop %>% filter(year==2019)
covid <- covid %>% merge(dist_pop, by="dist_id", all.x=TRUE)
# Jena is this district in Germany. They were the first to do mandatory face masks on April 6th, 18 days before federal mandate.
covid$treat <- covid$dist_id==16053
### Let's do this again with Covid-19 facemask data.
covid <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_cases_by_district.csv")
dist_names <- read.csv("~/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/Covid_DE_district_IDs.csv")
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's make into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
# Let's pull in physician info.
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/district_demographics/")
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# Let's pull in pharmacy info.
dist_pharma <- read.csv("dist_pharmas_2017.csv",sep=";") %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharmacies <- as.numeric(gsub(",",".",dist_pharma$pharmacies))
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# Let's pull in population info.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4)
dist_pop <- dist_pop %>% lapply(as.integer) %>% as.data.frame()
dist_pop <- dist_pop %>% filter(year==2019) %>% select(-c(year))
covid <- covid %>% merge(dist_pop, by="dist_id", all.x=TRUE)
# Jena is this district in Germany. They were the first to do mandatory face masks on April 6th, 18 days before federal mandate.
covid$treat <- covid$dist_id==16053
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=cum_cases,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
# Let's use the first difference. Growth instead of cumulative.
covid <- slide(data=covid,Var="cum_cases",TimeVar = "date",NewVar = "lag_cum_cases",slideBy = -1,GroupVar="dist_id")
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% mutate(lag_cum_cases = lag(cum_cases))
help("mutate")
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% group_by(dist_id) %>% mutate(lag_cum_cases = lag(cum_cases))
View(covid)
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% group_by(dist_id) %>% order(date) %>% mutate(lag_cum_cases = lag(cum_cases))
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% group_by(dist_id) %>% order_by(date) %>% mutate(lag_cum_cases = lag(cum_cases))
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% group_by(dist_id) %>% arrange(date) %>% mutate(lag_cum_cases = lag(cum_cases))
View(covid)
covid$new_cases <- covid$cum_cases - covid$lag_cum_cases
View(covid)
# Let's use the first difference. Growth instead of cumulative.
covid <- covid %>% arrange(dist_id,date) %>% group_by(dist_id) %>% mutate(lag_cum_cases = lag(cum_cases))
covid$new_cases <- covid$cum_cases - covid$lag_cum_cases
View(covid)
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=new_cases,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
# Let's trim to a reasonable window around the event date.
covid <- subset(covid,date <= as.numeric(as.Date("2020-05-21")) & date > as.numeric(as.Date("2020-03-01")))
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=new_cases,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
# Let's work with logs?
covid$ln_new <- log(covid$new_cases+1)
# Hard to see much here, but you can see Jena down at the bottom.
ggplot(data=covid,aes(x=date,y=ln_new,color=factor(treat),group=dist_id)) + geom_line() + geom_vline(xintercept=as.numeric(as.Date("2020-04-06")))
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from="ln_new")
# Author: Gord Burtch
# Purpose: Synth with mandatory facemask policy for Covid-19.
library(tidyr)
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("ln_new","under.3.years","yr.3.to.under.6.years"))
synth <- lm(data=select(covid.wide.train,-c(date)),` ln_new_ SK Jena`~.)
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("ln_new","under.3.years","yr.3.to.under.6.years"))
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
synth <- lm(data=select(covid.wide.train,-c(date)),` ln_new_ SK Jena`~.)
synth <- lm(data=select(covid.wide.train,-c(date)),`ln_new_ SK Jena`~.)
View(covid.wide)
synth <- lm(data=select(covid.wide.train,-c(date)),`ln_new_ SK Jena`~., na.action="ignore")
synth <- lm(data=select(covid.wide.train,-c(date)),`ln_new_ SK Jena`~., na.action="remove")
help(lm)
synth <- lm(data=select(covid.wide.train,-c(date)),`ln_new_ SK Jena`~., na.omit=TRUE)
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~., na.omit=TRUE)
library(skimr)
skim(covid.wide)
View(covid.wide.train)
skim(covid.wide)
help(pca)
help(PCA)
install.packages("PCA")
library(glmnet)
install.packages("glmnet")
library(glmnet)
lambdas <- 10^seq(2,-3,b=-.1)
lasso <- cv.glmnet(covid.wide, `ln_new_ SK Jena`, alpha=1, lambda=lambdas, standardize=TRUE,nfolds=5)
lasso <- cv.glmnet(covid.wide, covid.wide$`ln_new_ SK Jena`, alpha=1, lambda=lambdas, standardize=TRUE,nfolds=5)
help(glmnet)
lasso <- cv.glmnet(covid.wide, covid.wide$`ln_new_ SK Jena`, alpha=1, lambda=lambdas, standardize=TRUE,nfolds=5)
lasso <- cv.glmnet(covid.wide, covid.wide$`ln_new_ SK Jena`, alpha=1, lambda=lambdas, standardize=FALSE,nfolds=5)
lasso <- cv.glmnet(covid.wide, covid.wide$`ln_new_ SK Jena`, alpha=1, lambda=lambdas, nfolds=5)
lasso <- glmnet(covid.wide, covid.wide$`ln_new_ SK Jena`, alpha=1)
lasso <- glmnet(as.matrix(covid.wide%>%select(-c(`ln_new_ SK Jena`))), covid.wide$`ln_new_ SK Jena`, alpha=1)
lasso <- glmnet(model.matrix(~., covid.wide), covid.wide$`ln_new_ SK Jena`, alpha=1)
model.matrix(~., covid.wide)
lasso <- glmnet(model.matrix(~., covid.wide), `ln_new_ SK Jena`, alpha=1)
help("glmnet")
lasso <- glmnet(model.matrix(~., covid.wide), covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
lasso <- glmnet(model.matrix(~., complete.cases(covid.wide)), complete.cases(covid.wide)$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
covid_train <- complete.cases(model.matrix(~.,covid.wide))
covid_train <- model.matrix(~.,covid.wide)
View(covid_train)
View(covid_train)
help(model.matrix)
covid_train <- model.matrix(~.,covid.wide)
covid_train <- model.matrix(~,covid.wide)
covid_train <- model.matrix(~.,covid.wide)
lasso <- glmnet(covid_train, covid_train$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
lasso <- glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
covid_train <- covid_train[,complete.cases(covid_train)]
covid_train <- covid_train[,complete.cases(covid.wide)]
covid_train <- covid_train[,complete.cases(covid.wide)==TRUE]
covid_train <- covid_train[complete.cases(covid.wide)==TRUE]
covid_train <- covid_train[complete.cases(covid.wide)==TRUE,]
complete.cases(covid.wide)
covid_train <- covid_train[complete.cases(covid.wide)=TRUE,]
covid_train <- covid_train[complete.cases(covid.wide)=TRUE]
covid_train <- covid_train[,complete.cases(covid.wide)=TRUE]
covid_train <- covid_train[,complete.cases(covid.wide)]
covid_train <- covid_train[complete.cases(covid.wide)]
covid_train <- covid_train[complete.cases(covid.wide),]
complete.cases(covid.wide)
View(covid.wide)
install.packages("janitor")
library(janitor)
remove_empty_cols(covid.wide)
remove_empty(covid.wide)
covid.wide <- remove_empty(covid.wide)
covid_train <- model.matrix(~.,covid.wide)
lasso <- glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
summary(lasso)
lasso <- cv.glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
as.matrix(coef(lasso),lasso$lambda.min)
as.matrix(coef(lasso,lasso$lambda.min))
as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests$lambda.1se!=0]
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests$lambda.1se!=0]
ests[ests!=0,]
covid_train <- model.matrix(~.-c(`ln_new_ SK Jena`),covid.wide)
lasso <- cv.glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests!=0,]
covid_train <- model.matrix(~-c(`ln_new_ SK Jena`)+.,covid.wide)
lasso <- cv.glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests!=0,]
covid_train <- model.matrix(`ln_new_ SK Jena`~.,covid.wide)
lasso <- cv.glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests!=0,]
lasso <- cv.glmnet(covid_train, covid.wide$`ln_new_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests!=0,]
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("ln_new","under.3.years","yr.3.to.under.6.years"))
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# Let's use LASSO to pick out the variables that are informative for predicting Jena.
covid.wide.train <- remove_empty(covid.wide.train)
covid.train.train_mm <- model.matrix(`ln_new_ SK Jena`~.,covid.wide.train)
lasso <- cv.glmnet(covid_train_mm, covid.wide.train$`ln_new_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
covid.wide.train_mm <- model.matrix(`ln_new_ SK Jena`~.,covid.wide.train)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`ln_new_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
covid.wide.train_mm <- model.matrix(`ln_new_ SK Jena`~.,covid.wide.train)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`ln_new_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
ests[ests!=0,]
names(ests[ests!=0,])
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~c(names(ests[ests!=0,])-c("(Intercept)")), na.omit=TRUE)
c(names(ests[ests!=0,])-c("(Intercept)"))
c(names(ests[ests!=0,])) %>% select(-c("(Intercept)"))
c(names(ests[ests!=0,])) %>% select(-c("(Intercept)")
)
c(names(ests[ests!=0,]))[,1:] %>% select(-c("(Intercept)")
c(names(ests[ests!=0,]))[,1:]
c(names(ests[ests!=0,]))[1:]
c(names(ests[ests!=0,]))[1:length(names(ests))]
c(names(ests[ests!=0,]))[1:length(names(ests[ests!=0,]))]
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))] , na.omit=TRUE)
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]), na.omit=TRUE)
unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))])
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],sep="+")
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")
substr(paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"),1,length(paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"))-2)
substr(paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"),1,length(paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")))
substr(paste0(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"),1,length(paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")))
substr(paste0(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")),1,length(paste(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"))))
substr(paste0(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")),1,length(paste(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")))
)
substr(paste0(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+"),1,length(paste(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")))
)
)
paste0(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],join="+")
)
paste0(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),join="+")
concatenate(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),join="+")
concat(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),join="+")
unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),join="+")
unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),join="+"
unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))])
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]
paste(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],sep="+")
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),sep="+")
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))])
c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]
patse(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],sep="+")
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],sep="+")
paste(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],sep="+"))
paste(unlist(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))]),sep="+")
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("ln_new","under.3.years","yr.3.to.under.6.years"))
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# Let's use LASSO to pick out the variables that are informative for predicting Jena.
covid.wide.train.lasso <- remove_empty(covid.wide.train)
covid.wide.train_mm <- model.matrix(`ln_new_ SK Jena`~.,covid.wide.train.lasso)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`ln_new_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
names(ests[ests!=0,])
synth <- lm(data=covid.wide.train,`ln_new_ SK Jena`~paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
paste0(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
paste0(`ln_new_ SK Jena`+c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
fml <- paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
synth <- lm(data=covid.wide.train,formula=fml,collapse="+")
synth <- lm(data=covid.wide.train,formula=fml)
fml <- paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
synth <- lm(data=covid.wide.train,formula=fml)
fml
fml <- unlist(paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
synth <- lm(data=covid.wide.train,formula=fml)
fml
fml <- as.character(paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
synth <- lm(data=covid.wide.train,formula=fml)
fml
fml <- as.formula(paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
fml <- as.formula(paste0("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
fml <- as.formula(paste("`ln_new_ SK Jena`+",c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+"))
fml.rhs <- c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
fml.rhs <- paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
help(as.formula)
fml <- as.formula(paste("`ln_new_ SK Jena`~",fml.rhs))
synth <- lm(data=covid.wide.train,formula=fml)
summary(synth)
covid.wide$synth <- predict(synth,newdata = covid.wide)
ggplot(data=covid.wide,aes(x=date,y=synth)) +
geom_line(linetype="dashed") +
geom_line(data=covid.wide,aes(x=date,y=` SK Jena`),linetype="solid") +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),linetype="dashed",color="red") +
NULL
ggplot(data=covid.wide,aes(x=date,y=synth)) +
geom_line(linetype="dashed") +
geom_line(data=covid.wide,aes(x=date,y=`ln_new_ SK Jena`),linetype="solid") +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),linetype="dashed",color="red") +
NULL
# First, for intuition, let's create a synthetic control ourselves (manually).
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("cum_cases","under.3.years","yr.3.to.under.6.years"))
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# Let's use LASSO to pick out the variables that are informative for predicting Jena.
covid.wide.train.lasso <- remove_empty(covid.wide.train)
covid.wide.train_mm <- model.matrix(`cum_cases_ SK Jena`~.,covid.wide.train.lasso)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`cum_cases_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
names(ests[ests!=0,])
fml.rhs <- paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
fml <- as.formula(paste("`cum_cases_ SK Jena`~",fml.rhs))
synth <- lm(data=covid.wide.train,formula=fml)
covid.wide$synth <- predict(synth,newdata = covid.wide)
ggplot(data=covid.wide,aes(x=date,y=synth)) +
geom_line(linetype="dashed") +
geom_line(data=covid.wide,aes(x=date,y=`cum_cases_ SK Jena`),linetype="solid") +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),linetype="dashed",color="red") +
NULL
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
# Here are the non-zero control panels that lasso selected.
names(ests[ests!=0,])
# And, now let's plot the comparison between synthetic and actual.
ggplot(data=covid.wide,aes(x=date,y=synth)) +
geom_line(linetype="dashed") +
geom_line(data=covid.wide,aes(x=date,y=`cum_cases_ SK Jena`),linetype="solid") +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),linetype="dashed",color="red") +
ylab("Actual vs. Synthetic Cum COVID-19 Cases (Jena, DE)") +
xlab("Month (2020)")+
NULL
# And, now let's plot the comparison between synthetic and actual.
ggplot(data=covid.wide,aes(x=date,y=synth)) +
geom_line(linetype="dashed") +
geom_line(data=covid.wide,aes(x=date,y=`cum_cases_ SK Jena`),linetype="solid") +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),linetype="dashed",color="red") +
ylab("Cumulative COVID-19 Cases (Jena, DE)") +
xlab("Month (2020)")+
NULL
help(DataCombine)
