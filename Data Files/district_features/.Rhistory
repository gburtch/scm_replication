;
help(dataprep)
;
help(dataprep)
### Let's import Covid-19 case volume data from german districts, by day..
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/")
covid <- read.csv("Covid_DE_cases_by_district.csv")
head(covid)
# Let's convert date column into date format.
covid$date <- as.Date(covid$date)
dist_names <- read.csv("Covid_DE_district_IDs.csv")
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Author: Gordon Burtch
# Date: March 13th, 2021
# Purpose: Replication of Mitze, T., Kosfeld, R., Rode, J., & Wälde, K. (2020). Face masks considerably reduce COVID-19 cases in Germany. Proceedings of the National Academy of Sciences, 117(51), 32293-32301.
library(tidyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(janitor)
library(Synth)
library(ggthemes)
library(patchwork)
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's convert date column into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
View(covid)
# We can pull in other features, though these are not actually required.
# E.g., we can pull in physicians per capita in each district.
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/district_demographics/")
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# We now pull in pharmacy information.
dist_pharma <- read.csv("dist_pharmas_2017.csv",sep=";") %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharmacies <- as.numeric(gsub(",",".",dist_pharma$pharmacies))
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# We can pull in population information by age, and so on now as well.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4)
# Some missing values here.
dist_pop <- dist_pop %>% lapply(as.integer) %>% as.data.frame()
# We have yearly values for 3 years - let's just use the most recent set of values in 2019.
dist_pop <- dist_pop %>% filter(year==2019) %>% select(-c(year))
covid <- covid %>% merge(dist_pop, by="dist_id", all.x=TRUE)
# Jena is district id 16053.
covid$treat <- covid$dist_id==16053
# Let's trim to a reasonable window around the event date.
covid <- subset(covid,date > as.numeric(as.Date("2020-03-01")) & date <= as.numeric(as.Date("2020-05-21")))
# Hard to see much here in the descriptive plot of the time series.
# Jena is there at the bottom, though hard to see.
ggplot(data=covid,aes(x=date,y=log(cum_cases+1),color=factor(treat),group=dist_id,alpha=treat)) +
geom_line() +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Logarithm of Cases")))) +
scale_alpha_manual(guide=FALSE,values=c(0.25,1))+
scale_color_manual(name="District",labels=c("Others", "Jena"),values=c("gray","blue"))+
ggtitle("Cumulative COVID-19 Cases Over Time") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
NULL
# Let's create an approximation of synthetic control, ourselves, manually.
# We will do this with a simple linear predictive model in the pre-treatment period.
# First we pivot the data from long to wide, to use other districts' time series as predictors.
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("cum_cases","under.3.years","yr.3.to.under.6.years"))
head(covid.wide)
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# We have many more predictors than time periods now, so we let's do some feature selection.
# I'm going ot use LASSO to pick the controls I'll work with.
covid.wide.train.lasso <- remove_empty(covid.wide.train, which=c("rows","cols"))
covid.wide.train_mm <- model.matrix(`cum_cases_ SK Jena`~.,covid.wide.train.lasso)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`cum_cases_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
# Here are the non-zero control panels that lasso selected.
names(ests[ests!=0,])
# Okay, let's build our 'synthetic control'.
fml.rhs <- paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
fml <- as.formula(paste("`cum_cases_ SK Jena`~",fml.rhs))
synth <- lm(data=covid.wide.train,formula=fml)
summary(synth)
# Now we can synthesize the control series in the original data, into the post period.
covid.wide$synth <- predict(synth,newdata = covid.wide)
# And, finally, we plot the comparison between synthetic and actual.
OLS_plot <- ggplot(data=covid.wide,aes(y=synth,x=date,linetype="dashed")) + geom_line() +
geom_line(aes(y=`cum_cases_ SK Jena`,x=date,linetype="solid")) +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Cumulative COVID-19 Cases")))) +
scale_linetype_manual(name="Series",values=c("dashed","solid"),labels=c("Synth","Jena, DE"))+
ggtitle("Effect of Masks on COVID-19 (LASSO -> OLS Synth)") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
xlim(as.Date("2020-03-27"),as.Date("2020-04-26")) +
ylim(0,225)+
NULL
# Let's see how we did.
OLS_plot
# Synth expects to receive a data frame.
covid <- as.data.frame(covid)
# Synth won't allow missing values on predictors.
covid <- subset(covid,complete.cases(covid)==TRUE)
# The outcome variable *must* be named Y for Synth to accept it.
covid <- covid %>% rename(Y = cum_cases)
# Synth requires numeric date and unit ID variables.
covid$date2 <- as.numeric(covid$date)
covid$dist_id <- as.numeric(covid$dist_id)
# Synth requires a list of control ID's - let's pull them out here.
# Note: 16053 is Jena
# The authors also omitted a few neighboring districts, and districts that instituted their own mask policies soon after Jena.
# We thus also exclude 16071; Weimarer Land, 16062; Nordhausen, and 8325; Rottweil.
# The authors also omitted Saale-Holzland, but we lose it due to missing data on district features anyway.
dist_ids <- unique(covid$dist_id)
control_ids <- dist_ids[dist_ids != 16053 & dist_ids != 16071 & dist_ids != 16062 & dist_ids != 8325]
# Now we use Synth's data preparation package.
dataprep.out=
dataprep(foo = covid,
dependent = "Y",
unit.variable = "dist_id",
time.variable = "date2",
# The authors used a lot of seemingly irrelevant predictors
# For example, average female age? Average male age? Why is gender important?
# I am going to keep things simple here: pharmacies, physicians and elderly.
predictors = c("pharmacies","physicians","yr.75.years.and.over"),
predictors.op = "mean",
# We can also predict using case volumes day before treatment and week before treatment.
special.predictors = list(list("Y", 18356, "mean"),list("Y", 18350, "mean")),
#which panel is treated?
treatment.identifier = 16053,
#which panels are we using to construct the synthetic control?
# Controls here will be every other district.
controls.identifier = control_ids,
#what is the pre-treatment time period?
#these numeric values correspond to 34 days before treatment.
#the paper only uses the 14 days before treatment for some reason?
time.predictors.prior = c(18323:18357),
time.optimize.ssr = c(18323:18357),
#name of panel units
unit.names.variable = "district",
#time period to generate the plot for.
#paper only goes 20 days post treatment because other treatments started.
#We will just see what this looks like, however.
time.plot = 18343:18403)
# This will take a few minutes to run and identify the optimal weights.
synth.out = synth(dataprep.out)
# Synth's native plotting functions.
# Path.plot() plots the synthetic against the actual treated unit data.
path.plot(dataprep.res = dataprep.out, synth.res = synth.out,Xlab="Date",Ylab="Cumulative COVID-19 Cases",Main="Comparison of Synth vs. Actual Cum. COVID-19 Cases in Jena, Germany")
abline(v=18358,lty=2,col="red")
# Let's pull out the data from the result, to make our own nicer plots in ggplot of course
synth_data_out = data.frame(dataprep.out$Y0plot%*%synth.out$solution.w)
date = as.numeric(row.names(synth_data_out))
plot.df = data.frame(y=covid$Y[covid$dist_id==16053 & covid$date2 %in% date])
plot.df$synth = synth_data_out$w.weight
plot.df$date <- covid$date[covid$dist_id==16053 & covid$date2 %in% date]
SCM_plot <- ggplot(plot.df,aes(y=y,x=date,linetype="solid")) + geom_line() +
geom_line(aes(y=synth,x=date,linetype="dashed")) +
geom_vline(xintercept=18358,color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Cumulative COVID-19 Cases")))) +
scale_linetype_manual(name="Series",values=c("dashed","solid"),labels=c("Synth","Jena, DE"))+
ggtitle("Effect of Masks on COVID-19 (Proper Synth)") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
xlim(as.Date("2020-03-27"),as.Date("2020-04-26")) +
ylim(0,225)+
NULL
# Let's put the two plots side-by-side.
OLS_plot + SCM_plot
# Author: Gord Burtch
# Course: MSBA 6440 - Causal Inference
# Topic: Generalized Synthetic Control
library(gsynth)
library(panelView)
set.seed(400)
# Uber GSynth
df <- read.csv(file.choose())
panelView(ln_mb_ut~uber_presence, data=df,index=c("city","year_month"),na.rm=TRUE,outcome.type="continuous")
out <- gsynth(formula=ln_mb_ut ~ uber_presence + gas_price + ln_labor + unemployment, data = df,
index = c("city","year_month"), force = "two-way",inference="nonparametric",
CV = TRUE, se = TRUE, r = c(0,6),nboots=60, min.T0=20, parallel=TRUE,cores=8,na.rm=FALSE)
out
plot(out,xlim=c(-24,24))
plot(out,type="counterfactual",xlim=c(-24,24))
library(ggplot2)
library(ggthemes)
library(showtext)
font_add_google(name = "Economica")
showtext_auto()
plot_df$ub_90 <- plot_df$est + 1.645*plot_df$serr
plot_df$lb_90 <- plot_df$est - 1.645*plot_df$serr
plot_df <- data.frame(est=c(-0.047575,-0.058627,-0.053522,-0.077924,-0.053779,-0.026807,-0.009148,0.010861),
serr=c(0.018566,0.019207,0.019381,0.020060,0.019965,0.020857,0.020826,0.020803),
telework=factor(c(0,0,0,0,1,1,1,1)), own_compute=factor(c(0,0,1,1,0,0,1,1)),
ptnr_compute = factor(c(0,1,0,1,0,1,0,1)))
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated DD Wage Effect with 90% CIs") +
geom_hline(yintercept=0,color="red",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
plot_df$lb_90 <- plot_df$est - 1.645*plot_df$serr
plot_df$ub_90 <- plot_df$est + 1.645*plot_df$serr
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated DD Wage Effect with 90% CIs") +
geom_hline(yintercept=0,color="red",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated DD Wage Effect with 90% CIs") +
geom_hline(yintercept=0,color="gray",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated Portuguese Wage Change Under COVID-19 Lockdown with 90% CIs") +
geom_hline(yintercept=0,color="gray",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
geom_line()+
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated Portuguese Wage Change Under COVID-19 Lockdown with 90% CIs") +
geom_hline(yintercept=0,color="gray",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated Portuguese Wage Change Under COVID-19 Lockdown with 90% CIs") +
geom_hline(yintercept=0,color="gray",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
# Average Effects.
ggplot(data=plot_df,aes(y=est,x=interaction(own_compute,ptnr_compute),color=telework,group=telework))+
geom_point(data=plot_df,size=3,aes(group=telework)) +
#geom_line(data=plot_df, aes(color=factor(group))) +
#geom_ribbon(data=plot_df,size=1,aes(fill=factor(group),ymin=lb_90,ymax=ub_90),alpha=0.1) +
geom_errorbar(aes(ymin=lb_90,ymax=ub_90),alpha=0.3) +
theme_classic() +
xlab(expression(bold("Cohort"))) +
ylab(expression(bold("Average DD Wage Estimate"))) +
theme(text = element_text(family="Economica",size=16)) +
theme(axis.title.x = element_text(vjust=-1,size=17)) +
theme(axis.title.y = element_text(vjust=1,size=17)) +
ggtitle("Estimated Ln(Wage) Change Under COVID-19 Lockdown with 90% CIs") +
geom_hline(yintercept=0,color="gray",linetype="dashed")+
scale_color_manual(name="Telework",values=c("red","blue"),labels=c("No","Yes"))+
#scale_shape_manual(name="Cohort",values=interaction(plot_df$own_compute,plot_df$ptnr_compute),labels=c("Self: Low, Partner: Low","Self: High, Partner:Low", "Self: Low, Partner: High", "Self: High, Partner: High"))+
scale_x_discrete(labels=c("No Compute","Own Compute", "Partner Compute", "Own + Partner Compute"))+
#coord_flip()+
NULL
### Let's import Covid-19 case volume data from german districts, by day..
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/")
covid <- read.csv("Covid_DE_cases_by_district.csv")
View(covid)
# Let's convert date column into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
dist_names <- read.csv("Covid_DE_district_IDs.csv")
covid <- covid %>% merge(dist_names, by.x = "dist_id", by.y = "id")
# Let's convert date column into date format.
covid$date <- as.Date(covid$date)
covid <- covid[order(covid$dist_id,covid$date),]
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
# We can pull in other features, though these are not actually required.
# E.g., we can pull in physicians per capita in each district.
setwd("/Users/gburtch/Google Drive/Teaching/Courses/MSBA 6440/2021/(9) Synthetic Control /Covid-19 Facemasks/district_demographics/")
dist_physicians <- read.csv("dist_phys_pcap.csv",sep=";") %>% rename("dist_id" = "Kennziffer", "physicians" = "Ärzte.je..Einwohner") %>% filter(!is.na(dist_id)) %>% select(c(dist_id,physicians))
dist_physicians$physicians <- as.numeric(gsub(",",".",dist_physicians$physicians))
covid <- covid %>% merge(dist_physicians, by="dist_id", all.x=TRUE)
# We now pull in pharmacy information.
dist_pharma <- read.csv("dist_pharmas_2017.csv",sep=";") %>% filter(!is.na(Kennziffer)) %>% rename("dist_id" = "Kennziffer","pharmacies" = "Apotheken")
dist_pharma$pharmacies <- as.numeric(gsub(",",".",dist_pharma$pharmacies))
dist_pharma <- dist_pharma %>% select(c(dist_id,pharmacies))
covid <- covid %>% merge(dist_pharma, by="dist_id",all.x=TRUE)
# We can pull in population information by age, and so on now as well.
dist_pop <- read.csv("dist_pop_age.csv", sep=";") %>% select(-c(dist_name))
dist_pop$year <- substr(dist_pop$year,1,4)
# Some missing values here.
dist_pop <- dist_pop %>% lapply(as.integer) %>% as.data.frame()
# We have yearly values for 3 years - let's just use the most recent set of values in 2019.
dist_pop <- dist_pop %>% filter(year==2019) %>% select(-c(year))
covid <- covid %>% merge(dist_pop, by="dist_id", all.x=TRUE)
# Jena is district id 16053.
covid$treat <- covid$dist_id==16053
# Let's trim to a reasonable window around the event date.
covid <- subset(covid,date > as.numeric(as.Date("2020-03-01")) & date <= as.numeric(as.Date("2020-05-21")))
# Hard to see much here in the descriptive plot of the time series.
# Jena is there at the bottom, though hard to see.
ggplot(data=covid,aes(x=date,y=log(cum_cases+1),color=factor(treat),group=dist_id,alpha=treat)) +
geom_line() +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Logarithm of Cases")))) +
scale_alpha_manual(guide=FALSE,values=c(0.25,1))+
scale_color_manual(name="District",labels=c("Others", "Jena"),values=c("gray","blue"))+
ggtitle("Cumulative COVID-19 Cases Over Time") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
NULL
head(covid)
# Let's create an approximation of synthetic control, ourselves, manually.
# We will do this with a simple linear predictive model in the pre-treatment period.
# First we pivot the data from long to wide, to use other districts' time series as predictors.
covid.wide <- covid %>% pivot_wider(id_cols=c("date"),names_from=c("district"),values_from=c("cum_cases","under.3.years","yr.3.to.under.6.years"))
covid.wide.train <- subset(covid.wide,date<as.numeric(as.Date("2020-04-06")))
# We have many more predictors than time periods now, so we let's do some feature selection.
# I'm going ot use LASSO to pick the controls I'll work with.
covid.wide.train.lasso <- remove_empty(covid.wide.train, which=c("rows","cols"))
covid.wide.train_mm <- model.matrix(`cum_cases_ SK Jena`~.,covid.wide.train.lasso)
lasso <- cv.glmnet(covid.wide.train_mm, covid.wide.train$`cum_cases_ SK Jena`, standardize=TRUE,alpha=1,nfolds=5)
ests <- as.matrix(coef(lasso,lasso$lambda.1se))
# Here are the non-zero control panels that lasso selected.
names(ests[ests!=0,])
summary(lasso)
ests[ests!=0,]
synth <- lm(data=covid.wide.train,formula=fml)
# Okay, let's build our 'synthetic control'.
fml.rhs <- paste(c(names(ests[ests!=0,]))[2:length(names(ests[ests!=0,]))],collapse="+")
fml <- as.formula(paste("`cum_cases_ SK Jena`~",fml.rhs))
synth <- lm(data=covid.wide.train,formula=fml)
summary(synth)
# Now we can synthesize the control series in the original data, into the post period.
covid.wide$synth <- predict(synth,newdata = covid.wide)
# And, finally, we plot the comparison between synthetic and actual.
OLS_plot <- ggplot(data=covid.wide,aes(y=synth,x=date,linetype="dashed")) + geom_line() +
geom_line(aes(y=`cum_cases_ SK Jena`,x=date,linetype="solid")) +
geom_vline(xintercept=as.numeric(as.Date("2020-04-06")),color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Cumulative COVID-19 Cases")))) +
scale_linetype_manual(name="Series",values=c("dashed","solid"),labels=c("Synth","Jena, DE"))+
ggtitle("Effect of Masks on COVID-19 (LASSO -> OLS Synth)") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
xlim(as.Date("2020-03-27"),as.Date("2020-04-26")) +
ylim(0,225)+
NULL
# Let's see how we did.
OLS_plot
# Synth expects to receive a data frame.
covid <- as.data.frame(covid)
# Synth won't allow missing values on predictors.
covid <- subset(covid,complete.cases(covid)==TRUE)
# The outcome variable *must* be named Y for Synth to accept it.
covid <- covid %>% rename(Y = cum_cases)
# Synth requires numeric date and unit ID variables.
covid$date2 <- as.numeric(covid$date)
covid$dist_id <- as.numeric(covid$dist_id)
# Synth requires a list of control ID's - let's pull them out here.
# Note: 16053 is Jena
# The authors also omitted a few neighboring districts, and districts that instituted their own mask policies soon after Jena.
# We thus also exclude 16071; Weimarer Land, 16062; Nordhausen, and 8325; Rottweil.
# The authors also omitted Saale-Holzland, but we lose it due to missing data on district features anyway.
dist_ids <- unique(covid$dist_id)
control_ids <- dist_ids[dist_ids != 16053 & dist_ids != 16071 & dist_ids != 16062 & dist_ids != 8325]
# Now we use Synth's data preparation package.
dataprep.out=
dataprep(foo = covid,
dependent = "Y",
unit.variable = "dist_id",
time.variable = "date2",
# The authors used a lot of seemingly irrelevant predictors
# For example, average female age? Average male age? Why is gender important?
# I am going to keep things simple here: pharmacies, physicians and elderly.
predictors = c("pharmacies","physicians","yr.75.years.and.over"),
predictors.op = "mean",
# We can also predict using case volumes day before treatment and week before treatment.
special.predictors = list(list("Y", 18356, "mean"),list("Y", 18350, "mean")),
#which panel is treated?
treatment.identifier = 16053,
#which panels are we using to construct the synthetic control?
# Controls here will be every other district.
controls.identifier = control_ids,
#what is the pre-treatment time period?
#these numeric values correspond to 34 days before treatment.
#the paper only uses the 14 days before treatment for some reason?
time.predictors.prior = c(18323:18357),
time.optimize.ssr = c(18323:18357),
#name of panel units
unit.names.variable = "district",
#time period to generate the plot for.
#paper only goes 20 days post treatment because other treatments started.
#We will just see what this looks like, however.
time.plot = 18343:18403)
# This will take a few minutes to run and identify the optimal weights.
synth.out = synth(dataprep.out)
# Synth's native plotting functions.
# Path.plot() plots the synthetic against the actual treated unit data.
path.plot(dataprep.res = dataprep.out, synth.res = synth.out,Xlab="Date",Ylab="Cumulative COVID-19 Cases",Main="Comparison of Synth vs. Actual Cum. COVID-19 Cases in Jena, Germany")
abline(v=18358,lty=2,col="red")
# Let's pull out the data from the result, to make our own nicer plots in ggplot of course
synth_data_out = data.frame(dataprep.out$Y0plot%*%synth.out$solution.w)
date = as.numeric(row.names(synth_data_out))
date = as.numeric(row.names(synth_data_out))
plot.df = data.frame(y=covid$Y[covid$dist_id==16053 & covid$date2 %in% date])
plot.df$synth = synth_data_out$w.weight
plot.df$date <- covid$date[covid$dist_id==16053 & covid$date2 %in% date]
SCM_plot <- ggplot(plot.df,aes(y=y,x=date,linetype="solid")) + geom_line() +
geom_line(aes(y=synth,x=date,linetype="dashed")) +
geom_vline(xintercept=18358,color="red") +
xlab(expression(bold(paste("Date (2020)")))) +
ylab(expression(bold(paste("Cumulative COVID-19 Cases")))) +
scale_linetype_manual(name="Series",values=c("dashed","solid"),labels=c("Synth","Jena, DE"))+
ggtitle("Effect of Masks on COVID-19 (Proper Synth)") +
theme_economist() +
#Comment the below line out if you don't have Economica fonts installed.
theme(text = element_text(family = "Economica", size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))+
xlim(as.Date("2020-03-27"),as.Date("2020-04-26")) +
ylim(0,225)+
NULL
# Let's put the two plots side-by-side.
OLS_plot + SCM_plot
# Uber GSynth
df <- read.csv(file.choose())
df <- subset(df, !is.na(ln_mb_ut) & year > 2012)
panelView(ln_mb_ut~uber_presence, data=df,index=c("city","year_month"),na.rm=TRUE,outcome.type="continuous")
out <- gsynth(formula=ln_mb_ut ~ uber_presence + gas_price + ln_labor + unemployment, data = df,
index = c("city","year_month"), force = "two-way",inference="nonparametric",
CV = TRUE, se = TRUE, r = c(0,6),nboots=60, min.T0=20, parallel=TRUE,cores=8,na.rm=FALSE)
out
plot(out,xlim=c(-24,24))
plot(out,type="counterfactual",xlim=c(-24,24))
library(augsynth)
install.packages("augsynth")
